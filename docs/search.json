[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STAPLE Documentation",
    "section": "",
    "text": "1 Preface\nScientific research has become increasingly complex, requiring specialized skills, interdisciplinary work, and collaboration among large teams. Managing such projects and tracking data and metadata has become a significant challenge. The need for FAIR (findable, accessible, interoperable, and reusable) open data, materials, and metadata has similarly grown – especially considering recent mandates for required sharing for federally funded projects. While user-friendly software tools that help researchers structure metadata exist, few researchers are aware of their necessity and usefulness—the onus is still on the project team to collect and curate this information. Studies using teams of researchers require sophisticated tracking of all project elements, and therefore, there is a need for scientific project management software that is tailored to the management of all manner of science projects. Software that promotes best practices in FAIR data and metadata would increase openness in all reporting, and tracking, and reporting standards.\nCurrently, the tools and websites designed for researchers are focused on getting researchers to share their materials, code, and data (i.e., Open Science Framework (osf.io), FigShare, Zenodo). These repositories represent a necessary resource for long-term storage of outputs, but do not help researchers organize or track information during the life of a study. Project management software, like Asana, Monday, or ClickUp, are designed from a business perspective that is not tailored to scientific research. While the features that scientific research requires may be found in some individual project management software, no current solution provides all the essential features, such as the ability to assign tasks at different scales (e.g., teams, individuals), integrated metadata, fully transparent access to all information in the project manager, and long-term storage that complies with international data privacy regulations. Project management software is designed to get things done rather than document the way a project was completed, so attempts to use existing software for this often involve ‘hacking’ it to extract necessary records.\nThis project aims to develop a science focused project management tool, called STAPLE, that not only helps with the unique challenges of project management of research but includes open and transparent documentation of data and metadata, as well as proposing minimum metadata standards. STAPLE will have the ability to add project components based on research type, assign timelines, assign tasks to users/groups, link to long-term storage of research outputs, and interface with relevant application interfaces to track authorship credit. STAPLE will also include default metadata standards for documentation of common research outputs, be open-source, and allow for community input. The project aims to have a global impact by promoting the transformation to open science and including researchers and their works that may be commonly ignored, regardless of technical capabilities, so that it is open to everyone. By creating software that allows a point and click interface with error feedback and automated validation, we will promote inclusivity within the scientific community by enabling everyone to participate in transparency and openness."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Introduction",
    "section": "",
    "text": "The STAPLE mission: Project Management software that allows you to document your research project to improve transparency.\nAs researchers, we need to focus on the big picture - the overarching goals of a project, timelines, theory, hypotheses, and more. We then need to understand the smaller goals and tasks necessary to achieve the big picture. Researchers are often taught how to run projects, collect data, analyze that data, and write a paper summary. Training in project management is learned by example through the research lab, depending on the supervisor, and often not directly taught. Each project often involves special needs and circumstances, and the addition of even one more local collaborator can create complexity with multiple moving parts.\nResearch shows that the number of co-authors and collaborators on research projects is increasing over time. The globalization of research, the Internet, and software tools for collaboration (Zoom, GitHub, Google, etc.) has improved our ability to work together on new ideas. Large-scale collaboration has been encouraged to improve the diversity of participants, researchers, and cultures represented in data. Once we add other people (with different lab cultures and expectations!), institutions, geopolitical regions, and languages - the complexity of a research project also increases.\nSo why do we need software?\nProject management software exists: Asana, Monday, Clickup, and Trello for example. These products were designs based on project management templates that are often business focuses. Research projects have their own unique and special needs that do not fit neatly into business models. Large-scale teams have found success treating a research project with many smaller teams as a classroom - but software designed for educational purposes is also not completely compatible with research project goals and management. STAPLE is designed for scientists by scientists with input from important stakeholders including funders, librarians, journals, and more.\nSo what’s the deal with documentation?\nIn tandem with the encouragement for interdisciplinary, diverse teams, researchers have begun to focus on the improvement of science through transparency and sharing. The Transparency and Openness guidelines (https://www.cos.io/initiatives/top-guidelines) establish ideals for projects to be reproducible, open, and transparency through data sharing, code/analysis sharing, materials sharing, pre-registration, and replication. Journals require different levels of sharing for publication, which has pushed researchers to begin to implement these practices. However, the simple sharing of data, code, and materials does not make them FAIR: Findable, Accessible, Interoperable, and Reusable. Simple sharing of data does not necessarily allow someone to find that data in relation to the research project, or allow a researcher to know what V1 means in the data, or even reuse part of the data.\nCreating adequate documentation for the reuse of any output from a project can be difficult. There are often no clear standards, the work can be time consuming, and is often left to the end of a project when important details may have been forgotten. STAPLE is designed to encourage you to document information along the way and to provide guidance with what you should include with each document. As you complete specific task, such as create your materials for a study, you will be able to link your project to those materials and include information to interpret and understand those documents. We provide a set of minimum documentation standards for multiple types of documents - and the ability for you to include extra information if your field has set standards.\nOk, so that’s transparent?\nSTAPLE allows you to track and run your project - and then include research outputs from that project. Each step of the way, STAPLE collects data about who did what and when. If you are the only person working on a project, it’s simple: you will export a final project timeline that includes information about each step of the project, each output, and the documentation needed to make those outputs useful. If you work with other people, STAPLE will allow you to assign tasks to those individuals (or teams of individuals!) to complete as part of the project management functionality. At the same time, STAPLE tracks their work and creates a project timeline that shows that they completed a task for the project.\nThis component of the software was designed to align with contributorship models of research - instead of “authorship”, each person receives credit for the components they contributed to the project. Each field has different standards for authorship, and many individual’s work may be unacknowledge due to those cultures. Using STAPLE, their work would be credited, even if they did not earn final “authorship” on a publication. This output is also useful for defining contributions into systems such as CRediT (https://credit.niso.org/) - where each person’s role is binned into categories. By linking each role to specific tasks, we can transparently show what each role means to a specific project."
  },
  {
    "objectID": "metadata.html#metadata",
    "href": "metadata.html#metadata",
    "title": "3  Metadata",
    "section": "3.1 Metadata?",
    "text": "3.1 Metadata?\n\nMetadata is the data about your “outputs”\nCitations are just metadata for a research article\nMetadata can include codebooks for datasets\nBut also can be included for nearly everything we do\nYou will check out our proposed metadata categories\n\nAre we missing any?\nWhat should be included with each category?"
  },
  {
    "objectID": "metadata.html#metadata-1",
    "href": "metadata.html#metadata-1",
    "title": "3  Metadata",
    "section": "3.2 Metadata?",
    "text": "3.2 Metadata?\n\nAction: tracking when things happen within a project\nProject: the global project level information\nContributor: person information about who is doing stuff on project\nContributorship System: how you will track CRediT or others\nOrganization: the university/ngo/organization a contributor is attached to"
  },
  {
    "objectID": "metadata.html#metadata-2",
    "href": "metadata.html#metadata-2",
    "title": "3  Metadata",
    "section": "3.3 Metadata?",
    "text": "3.3 Metadata?\n\nDocuments: data, stimuli, materials, ethics, and much more\n\nText\nAudio\nVideo\nPictures\n\nData: a special category of documents that will include special extra parts\n\nPrimary Data\nSecondary Data\n\n\nTypes:\nhttps://cmr.earthdata.nasa.gov/search/site/docs/search/api.html https://project-open-data.cio.gov/v1.1/schema/\n\nXSD-XML\n\nInput: XSD for the schema\nOutput: XML for the filled in (Native format)\n\nXML from w3\nRDF (which is often converted to json or xml)\n\nOther objects related to N3, turtle, etc.\nTurtle, Triples, Quads, CSV\n\nJSON\n\nJSON-schema is the validation\nJSON-LD is the output"
  },
  {
    "objectID": "metadata.html#these-words-arent-yours",
    "href": "metadata.html#these-words-arent-yours",
    "title": "3  Metadata",
    "section": "3.4 these words aren’t yours",
    "text": "3.4 these words aren’t yours\nWhile the metadata application is manifold, covering a large variety of fields, there are specialized and well-accepted models to specify types of metadata. Bretherton & Singley (1994) distinguish between two distinct classes: structural/control metadata and guide metadata.[24] Structural metadata describes the structure of database objects such as tables, columns, keys and indexes. Guide metadata helps humans find specific items and is usually expressed as a set of keywords in a natural language. According to Ralph Kimball, metadata can be divided into three categories: technical metadata (or internal metadata), business metadata (or external metadata), and process metadata.\nNISO distinguishes three types of metadata: descriptive, structural, and administrative.[22] Descriptive metadata is typically used for discovery and identification, as information to search and locate an object, such as title, authors, subjects, keywords, and publisher. Structural metadata describes how the components of an object are organized. An example of structural metadata would be how pages are ordered to form chapters of a book. Finally, administrative metadata gives information to help manage the source. Administrative metadata refers to the technical information, such as file type, or when and how the file was created. Two sub-types of administrative metadata are rights management metadata and preservation metadata. Rights management metadata explains intellectual property rights, while preservation metadata contains information to preserve and save a resource.[8]"
  },
  {
    "objectID": "metadata.html#end",
    "href": "metadata.html#end",
    "title": "3  Metadata",
    "section": "3.5 end",
    "text": "3.5 end\nTo do: Add glossary terms throughout this document.\nhttps://www.nature.com/articles/s41597-022-01815-3 https://direct.mit.edu/qss/article/1/1/414/15577/Crossref-The-sustainable-source-of-community-owned https://www.cell.com/patterns/pdf/S2666-3899(21)00170-7.pdf\nWhy do I need it\nTypes of metadata\nWhat is json\nWhy is json useful"
  },
  {
    "objectID": "metadata.html#staple-metadata",
    "href": "metadata.html#staple-metadata",
    "title": "3  Metadata",
    "section": "3.6 STAPLE Metadata",
    "text": "3.6 STAPLE Metadata\n\n3.6.1 Action\n\ndone\n\n\n\n3.6.2 Project\nRequired elements of project-level metadata:\n\nName of the project\nProject description\nAuthors\nCorresponding Author\nCitation\nPersistent identifier (DOI)\nSubject/keywords\nFunders\nDate\n\nhttps://schema.org/ResearchProject\n\n\n3.6.3 Data\nData gets a special type of schema, etc.\nhttps://schema.org/Dataset\n\n3.6.3.1 Primary Data\n\n\n3.6.3.2 Secondary Data\n\n\n\n3.6.4 Project Outputs\nNote that data can be text, but this is the spot we classify other objects you may output.\n\n3.6.4.1 Text\nhttps://schema.org/TextObject\n\n\n3.6.4.2 Audio\nhttps://schema.org/AudioObject\n\n\n3.6.4.3 Video\nhttps://schema.org/VideoObject\n\n\n\n3.6.5 Image\nhttps://schema.org/ImageObject\n\n\n3.6.6 Author\nhttps://schema.org/Person\n\n\n3.6.7 Organization\n\n\n\n3.6.8 Funder\n\n\n3.6.9 CRediT"
  },
  {
    "objectID": "metadata.html#add-your-specific-requirements",
    "href": "metadata.html#add-your-specific-requirements",
    "title": "3  Metadata",
    "section": "3.7 Add your specific requirements",
    "text": "3.7 Add your specific requirements\njson format\nmetadata builder?"
  },
  {
    "objectID": "staple-elements.html#definitions-of-terms",
    "href": "staple-elements.html#definitions-of-terms",
    "title": "4  Overview of STAPLE",
    "section": "4.1 Definitions of Terms",
    "text": "4.1 Definitions of Terms\n\n4.1.1 User\nA user in STAPLE is a person who has an account and agreed to terms and conditions. Users can create all the elements described below on their own accounts and complete tasks as part of projects that were created an another person’s account.\nUsers have the ability to log in/log out, update their personal information (username, password, email, and profile information), and delete their account. Users also have the ability to add and manage contributors who are part of their projects. They can create teams for individual projects.\nNote: Deleting your account does not delete you from contributions tied to other projects. You will lose the ability to edit those contributions but you must have the administrator of that project delete you from that project if you wish.\n\n4.1.1.1 Project Admin\nA use can be a project administrator:\n\nBy default, those who “create” a project are a project administrator on that project. See the permissions section below for an explanation of what that means.\nAdditional project administrators can be added to individual projects.\n\n\n\n4.1.1.2 Contributor\n\nA user can also be added as a contributor on a project. Contributors have limited access to other projects, generally only able to complete tasks that have been assigned to them.\n\n\n\n4.1.1.3 Teams\n\nTeams are a special type of contributor for projects. Each user can be part of multiple teams within a project. Teams are used for tasks that involve a group of people who need to complete a goal. For example, a data collection team for a project with human subjects will need to complete an ethics application to cover their team for data collection. Therefore, each person gets credit for completing the ethics review, but only one person on the team needs to complete the “task” within STAPLE. Another example could be a team of translators who work on converting materials into Spanish from French. The goal is to provide the final Spanish materials, but the entire team gets credit for completing this task.\n\n\n\n\n4.1.2 Permissions\n\nProject administrators have permissions to edit everything within a project (people, structure [see below], tasks, documentation, and more). They can add, edit, delete, and update all information within a project.\nContributors only have permission to view and edit tasks that are assigned to them, along with the global project information on a project to which they have been added.\n\n\n\n4.1.3 Projects\n\n\nProjects are the main organizational structure within STAPLE. Projects are defined by the user but can be thought of as: a research paper, a thesis, a grant application, a meta-analysis, a team report, and more.\nUsers will be able to create, read, update, and delete projects. They can define project roles by adding contributors (and contributor teams) and defining additional project administrators. They can create, update, and delete all the possible options described below (elements, tasks, metadata).\n\n\n\n4.1.4 Tasks\n\nTasks are the “to-do” list within a project. Tasks must be assigned to a project. Each task must have a contributor and/or team assigned to them (and the default is the person who creates the task). Additionally, tasks can include a requirement for documentation. These documentation standards can be selected from our minimum requirement list or can your own options can be uploaded.\nThe documentation will appear as a “form” online for a person to fill out. They will fill in the required information for that type of task (defined by the creator, please see metadata section for types). These form outputs can be updated by the project administrator at any time or can be updated as part of the review process.\nOnce a task has been assigned to a user, the user will get an email to complete the task. At this point, once the user has “completed” the task, the project administrator will receive an email that the task has been completed. They can review the task to ensure it has been completed correctly. If not, they can send the task back to the original user who can then update the task information. This structure is designed in a similar way to GitHub - once a person completes as task, it is reviewed. If ok, the task is marked done, and if not, it requires the original contributor to update and resubmit.\n\n\n\n4.1.5 Elements\n\nElements are a special placeholder within a project. You can create projects entirely without elements. However, many people like to group tasks into larger categories. Elements are storage boxes for groups of tasks or outputs that fit together. For example, you may create an element for a project that contains all the stimuli materials. This element could be assigned tasks such as “upload the stimuli online”, “translate the stimuli into French”, “translate the stimuli in Arabic”, and so on.\nYou can also use elements to label specific sections of a project. For example, you can use elements to hold materials, data, analyses, and the final manuscript, which will put these outputs into labeled sections on the final documentation.\nTasks can be assigned to elements. By assigning a task to an element, you are grouping them together on STAPLE and the final output documentation provided for transparency purposes.\n\n\n\n4.1.6 Dashboard\n\nThe project dashboard allows you to review the elements, tasks, contributors, and documentation available for the project.\nAdditionally, you can view and export a human and machine readable timeline for the project. This documentation will include the project documentation collected from contributors, the element structure of the project, and what each contributor did for the project (and a timestamp of when they did it)."
  },
  {
    "objectID": "walkthrough.html#example-1-one-principal-investigator-multiple-data-sources",
    "href": "walkthrough.html#example-1-one-principal-investigator-multiple-data-sources",
    "title": "5  Example Walkthroughs",
    "section": "5.1 Example 1: One Principal Investigator, Multiple Data Sources",
    "text": "5.1 Example 1: One Principal Investigator, Multiple Data Sources\nThe first example study covers a computational linguistics project in which a researcher collects primary data and uses a secondary data source. In this project, the researcher collects data on semantic priming to show that people read faster when the words are related to each other like cat-dog rather than unrelated like spoon-dog. Researchers can define similarity - how related words are - in multiple ways, so the researcher wishes to clearly document how they calculated similarity using an secondary data source. Further, the researcher used other psycholinguistic databases to see if they could predict the amount of semantic priming in their study based on the characteristics of the words in the study.\n\n5.1.1 Add a Project\nFirst, you will go to the project page by using the top navigation bar. To add a new project, click “CREATE PROJECT”.\nEnter your project name and description.\nTo do: add all project level metadata.\nOnce the project page is created, you will be brought to the overview page for the project.\nTo do: the data dashboard is temporary, ideas welcome.\nEach component of the project dashboard is explained more on STAPLE Elements section. In short:\n\nTasks: a place to create to-dos, track contributions, and add reminders to get things done. Tasks are always tied to projects and a specific user or team.\nElements: elements are storage boxes for specific project steps. You can think of them as ways to organize your tasks or project. For example, you may use Ethics, Data, Analysis and Results, and Manuscript as ways to group tasks, contributions, and outputs together. Tasks can be tied to a specific element.\nContributors: people involved in the project. This part does not necessarily mean authorship, it simply means someone who did something for the project.\nSettings: the place to update the project level metadata.\n\nTo do: figure out how to add users and teams for different levels of project tasks.\n\n\n5.1.2 Add Elements\nI would then add the different elements to my project. I click on elements to get the elements page and create element for adding new areas of organization. There are lots of ways to organize these. I could have created “data” and put both primary and secondary data within that element. I also could add separate elements for the pre-registration (if applicable) or potentially separate materials and translation into two elements.\nTo do: figure out a view and updating for these.\n\n\n5.1.3 Add Contributors\nFrom the project dashboard, you can click on contributors to add a new person to the project. Note: this process adds them only to that project.\nYou would be able to add contributors by email on this page. It will notify them that you have added them to the project. Once a contributor has been added to a project, you can begin to assign them tasks.\nTo do:\n\nAllow adding by email.\nCreate teams and add contributors to them.\n\n\n\n5.1.4 Add Tasks\nIn theory, you could create and run a project with no elements. You would use the task tab for all functionality. To create a task, click on tasks. Note that a lot of task functionality is not available yet, but we will pretend it is.\nWhen creating a task, you will define:\n\nThe task name\nThe task description or a how-to complete the task\nThe element a task should be assigned to (or none)\nThe person or team associated with the task\nIf the task needs an “output” (something that needs metadata)\nIf so, what type of metadata should the task include?\n\nOnce you create a task, the information on what needs to be done will be emailed to the user or team with the task information. They (or you) will be able to complete the task, and information about when the task was assigned and completed will be stored.\nIf the task has been tagged with needing an output - you will then need to enter the metadata for the requested output. For example, I created a task called “upload IRB documents”. In this case, the required output would be ethics approval for the study. I would store that document in my favorite repository (OSF, GitHub, FigShare, etc.) and create a permanent link for the document. Then I would enter the required metadata for that document. In this case, it would be a simple explanation of what the text document contains.\nTo do:\n\nAllow tasks to be tagged within element.\nView tasks within elements pages.\nAllow tasks to be tagged with a person or team.\nAllow tasks to be tagged with “needs metadata” or not.\nProvide example of difference in metadata for primary and secondary data.\n\n\n\n5.1.5 Project Outputs\nTo do: Add examples for each type of metadata here. Please see the Metadata section at the moment.\n\n\n5.1.6 Project Completion\nWhen all tasks are complete and all metadata is entered for the project outputs, you can build a project timeline from the dashboard page. This information will present:\n\nWhat was done on a project with a timestamp (example)\n\nWho/When a task was assigned\nWho/When a task was completed\nWho/When metadata was added\nWho/When elements were created\nAnd so on\n\nA machine readable format of all the metadata for the study\nA contributorship output matching the model you wish to use\n\nFor example, tagged CRediT categories\n\n\nTo do: update dashboard to include this option."
  },
  {
    "objectID": "walkthrough.html#example-2-big-team-project-multiple-data-collection-sites",
    "href": "walkthrough.html#example-2-big-team-project-multiple-data-collection-sites",
    "title": "5  Example Walkthroughs",
    "section": "5.2 Example 2: Big-Team Project, Multiple Data Collection Sites",
    "text": "5.2 Example 2: Big-Team Project, Multiple Data Collection Sites"
  },
  {
    "objectID": "installation.html#assumptions",
    "href": "installation.html#assumptions",
    "title": "6  Installation Guide",
    "section": "6.1 Assumptions",
    "text": "6.1 Assumptions\n\nThis guide assumes the following:\n\nYou are working on a Linux server. We are specifically using Ubuntu 20, but this guide should be consistent for most versions of Linux.\nYou have access to the shell command console. You will need access to install files directly onto the server computer.\nYou have worked with the command line before.\nYou have sudo rights to add files and services.\nYou know what a hidden file is and at least how to google how to view them.\nYou know what SQL and databases are, even if you’ve never worked with PostgreSQL before.\nYou know what Apache and/or nginx servers are and how to edit their files.\nYou can at least imagine yourself using git."
  },
  {
    "objectID": "installation.html#installation-on-a-server",
    "href": "installation.html#installation-on-a-server",
    "title": "6  Installation Guide",
    "section": "6.2 Installation on a Server",
    "text": "6.2 Installation on a Server\n\n6.2.1 Web Server Installation\n\nApache - Installation Instructions\nNginx - Installation Instructions\nThey really aren’t big fans of each other, only install one. We are using nginx on our server.\n\n\n\n6.2.2 Blitz/JS Installation\n\nInstall node.js and npm - Installation Instructions\n\nOther downloads\nYou should have at least node v18+ and npm v9+.\nYou can check your versions by using node -v and npm -v in a terminal or command window.\nYou may also use yarn, but this guide uses npm.\n\nInstall blitzjs: npm install -g blitz in a terminal/command window. Check your version is at least v2+ by using blitz -v in a command window.\nDepending on server setup, you may need sudo privileges.\n\n\n\n6.2.3 Clone This Repository\n\nClone or copy this github repository to the server.\n\nInstall git on the machine using: sudo apt-get update sudo apt-get install git\nNavigate to /var/www/html/ or /var/www/ on the Linux machine.\nClone the repository by using this guide - Installation Instructions. git clone https://github.com/STAPLE-verse/STAPLE.git\nThis will make a folder called STAPLE with all the files you need.\n\nNavigate to that folder by using cd STAPLE.\n\n\n\n6.2.4 Database Installation\n\nEnsure that you have a local postgres service running on your computer.\nTo install see: Installation Instructions.\n\nBe sure to write down the superuser information as you are installing the setup for non-Linux machines.\nYou may use other databases, but will need to modify the provided code for their implementation.\n\nCreate the databases for STAPLE. Go to terminal and use:\n\nNote that all lines that start with # are comments for explanation.\n\n\n# get into postgres on linux\nsudo -u postgres psql \n# enter your password for superuser when prompted\nCREATE DATABASE staple;\nCREATE DATABASE staple_test;\n\nCreate a user with appropriate privileges after postgres installation. While in the terminal and postgres, create a new user:\nChange out username and password (be sure to leave the quotes!) for your desired user.\n\nCREATE USER username WITH PASSWORD 'password';\n\nGet into the STAPLE database. You can use \\l and should see something like this:\n\npostgres=# \\l\n                                     List of databases\n    Name     |  Owner   | Encoding |   Collate   |    Ctype    |     Access privileges     \n-------------+----------+----------+-------------+-------------+---------------------------\n postgres    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | \n staple      | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/postgres             +\n             |          |          |             |             | postgres=CTc/postgres    +\n             |          |          |             |             | staple=CTc/postgres      +\n             |          |          |             |             | staple_admin=CTc/postgres\n staple_test | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | \n template0   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres              +\n             |          |          |             |             | postgres=CTc/postgres\n template1   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres              +\n             |          |          |             |             | postgres=CTc/postgres\n(5 rows)\n\nUse the following to get into the STAPLE database.\n\npostgres=# \\c staple\nYou are now connected to database \"staple\" as user \"postgres\".\nstaple=# \n\nYou can check that schema exist using \\dn:\n\nstaple=# \\dn\n List of schemas\n  Name  | Owner  \n--------+--------\n public | staple\n(1 row)\n\nstaple=# \n\nGive your user the appropriate permissions to write to the database. Change out username for the user you created a minute ago.\n\nGRANT ALL ON SCHEMA public TO username;\n\nUse quit; to exit out of postgres.\n\n\n\n6.2.5 Connect Database to STAPLE App\n\nMake sure you are in the folder that you copied the github repository into.\nYou can use ls -al to view all files in that folder.\n\n# for example on my server \nerin@staple:~$ cd /var/www/html/STAPLE\nerin@staple:/var/www/html/STAPLE$ ls -al\ntotal 764\ndrwxr-xr-x  13 root root   4096 Oct 24 06:17 .\ndrwxr-xr-x   6 root root   4096 Oct 24 05:02 ..\ndrwxr-xr-x   3 root root   4096 Oct 24 04:27 db\n-rw-r--r--   1 root root    175 Oct 24 04:27 .editorconfig\n-rw-r--r--   1 root root    494 Oct 24 06:17 .env\n# more truncated # \n\nCopy the .env file and rename it .env.local.\n\nYou may need to turn on settings to see these hidden files on your machine.\nYou can create and edit this file at once with nano .env.local or vim if you want.\n\nEnsure the .env.local file has required environment variables.\n\nAfter the commented lines, add the DATABASE_URL line and change  to username:password (no &lt;&gt; these are here to show you what to change).\nCreate and add a SESSION_SECRET_KEY.\n\nIn the command line prompt, use openssl rand -hex 16 and copy this long letter/number combination instead of .\n\n\n\n# This env file should be checked into source control\n# This is the place for default values for all environments\n# Values in `.env.local` and `.env.production` will override these values\nDATABASE_URL=postgresql://&lt;YOUR_DB_USERNAME&gt;@localhost:5432/staple\nSESSION_SECRET_KEY=&lt;SESSIONKEY&gt;\n\nCopy the .env.test file and rename .env.test.local.\nEnsure the .env.test.local file has required environment variables in the same way you did above.\n\nDATABASE_URL=postgresql://&lt;YOUR_DB_USERNAME&gt;@localhost:5432/staple_test\n\n\n6.2.6 Install STAPLE Requirements\n\nMake sure you are in the STAPLE main folder. Use the following (not the # line, these are notes) to install packages, tailwind, and daisyui.\n\n# to install all packages for staple\nnpm install\n# install tailwind css\nblitz install tailwind\n# install daisyui\nnpm i -D daisyui@latest\n\nNext, use the following line to create the database structure/schema for STAPLE to run.\n\n# to create database with the right set up\nblitz prisma migrate dev\n\n\n6.2.7 Starting the App - Local Testing\n\nIn a terminal window, go to the folder you cloned this repository and type:\n\nblitz dev\n\nOpen (usually) http://localhost:3000 (or whatever it says for localhost in the terminal) with your browser to see the result.\nThis step works great on a “regular” computer, but may not be useful for a server. Instead run the service “in production” to view on your website.\n\n\n\n6.2.8 Starting the App - Production\n\nIn a terminal window, go to the folder you cloned this repository and type:\n\nblitz build\n\nThis step may produce errors in the build. You will need to fix these errors before running the application. Check below for common issues.\n\n\n\n6.2.9 Keeping the App Going\n\nCreate a service.\nGenerally, you might consider putting it here: /etc/systemd/system/ on a linux machine.\nWe’ve named the file blitz.service as an example creating it using nano.\nTutorial for those who do not know how to do this - Installation Instructions\n\n# for example \nerin@staple:/var/www/html/STAPLE$ cd /etc/systemd/system/\nerin@staple:/etc/systemd/system$ nano blitz.service\n\nExample file structure:\nChange the WorkingDirectory to your folder.\n\n[Unit]\nDescription=Starts the Blitz service.\nAfter=network.target\n\n[Service]\nType=simple\nWorkingDirectory=/var/www/html/STAPLE\nExecStart=/usr/local/bin/blitz start\nRestart=always\n\n[Install]\nWantedBy=default.target\n\nCommands:\n\nstop: sudo systemctl stop blitz\nstart: sudo systemctl start blitz\nrestart: sudo systemctl restart blitz\nreload: sudo systemctl reload blitz\ndisable: sudo systemctl disable blitz\nre-enable: sudo systemctl enable blitz\nstatus: sudo systemctl status blitz\nreset: sudo systemctl reset-failed blitz\n\n\nMany thanks to Scott B. for setting this up and giving instructions.\n\nRun sudo systemctl start blitz.\nCheck the status using sudo systemctl status blitz. Type the letter q to exit.\nStatus can also help you troubleshoot when you have an error.\n\n\n\n6.2.10 Setting Up the Proxy\n\nUse the following to get to the nginx web server: cd /etc/nginx/sites-enabled\nCreate a file by using nano YOURWEBSITE … for example ours is nana app.staple.science because that is the website of our hosted version of STAPLE.\nCreate the server file setup:\n\n# Default server configuration\n#\nserver {\n\n    server_name YOURWEBSITE;\n    error_log /var/www/html/YOURFOLDER/logs/web-server.log;\n    location / {\n        proxy_pass http://localhost:3000/;\n    }\n}\n\nserver {\n    server_name YOURWEBSITE;\n    listen 80;\n}\n\nFor https you need to set up a certificate and the easiest solution is through certbot. See Installation Instructions."
  },
  {
    "objectID": "installation.html#common-errors",
    "href": "installation.html#common-errors",
    "title": "6  Installation Guide",
    "section": "6.3 Common Errors",
    "text": "6.3 Common Errors"
  },
  {
    "objectID": "installation.html#run-on-your-own-computer",
    "href": "installation.html#run-on-your-own-computer",
    "title": "6  Installation Guide",
    "section": "6.4 Run on Your Own Computer",
    "text": "6.4 Run on Your Own Computer\nYou can also run the software locally on your own computer with a few limitations. If you are using a Linux system, you can follow the instructions above from Blitz/JS Installation through Starting the App - Production. You will be the only user allowed to enter data if you use the software on your own computer, as you are not hosting it on the web for others to connect to. However, you can still use all the functionality of project management and metadata entry/output.\n\n6.4.1 Blitz/JS Installation\n\nInstall node.js and npm for - Installation Instructions\n\nThis installer includes both node.js and npm.\nYou should have at least node v18+ and npm v9+.\nYou can check your versions by using node -v and npm -v in a terminal or command window.\nYou may also use yarn, but this guide uses npm.\n\nInstall blitzjs: npm install -g blitz in a terminal/command window. Check your version is at least v2+ by using blitz -v in a command window.\nDepending on your computer setup, you may need sudo privileges.\n\n\n\n6.4.2 Clone This Repository\n\nClone or copy this github repository to your computer - Installation Instructions. git clone https://github.com/STAPLE-verse/STAPLE.git\nThis will make a folder called STAPLE with all the files you need.\nNavigate to that folder in your terminal window.\n\n\n\n6.4.3 Database Installation\n\nEnsure that you have a local postgres service running on your computer.\nTo install see: Installation Instructions.\n\nBe sure to write down the superuser information as you are installing the setup for non-Linux machines.\nYou may use other databases, but will need to modify the provided code for their implementation.\n\nCreate the databases for STAPLE. Go to terminal and use:\n\nNote that all lines that start with # are comments for explanation.\n\n\n# get into postgres on mac\npsql -U postgres\n# enter your password for superuser when prompted\nCREATE DATABASE staple;\nCREATE DATABASE staple_test;\n\nCreate a user with appropriate privileges after postgres installation. While in the terminal and postgres, create a new user:\nChange out username and password (be sure to leave the quotes!) for your desired user.\n\nCREATE USER username WITH PASSWORD 'password';\n\nGet into the STAPLE database. You can use \\l and should see something like this:\n\npostgres=# \\l\n                                     List of databases\n    Name     |  Owner   | Encoding |   Collate   |    Ctype    |     Access privileges     \n-------------+----------+----------+-------------+-------------+---------------------------\n postgres    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | \n staple      | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/postgres             +\n             |          |          |             |             | postgres=CTc/postgres    +\n             |          |          |             |             | staple=CTc/postgres      +\n             |          |          |             |             | staple_admin=CTc/postgres\n staple_test | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | \n template0   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres              +\n             |          |          |             |             | postgres=CTc/postgres\n template1   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres              +\n             |          |          |             |             | postgres=CTc/postgres\n(5 rows)\n\nUse the following to get into the STAPLE database.\n\npostgres=# \\c staple\nYou are now connected to database \"staple\" as user \"postgres\".\nstaple=# \n\nYou can check that schema exist using \\dn:\n\nstaple=# \\dn\n List of schemas\n  Name  | Owner  \n--------+--------\n public | staple\n(1 row)\n\nstaple=# \n\nGive your user the appropriate permissions to write to the database. Change out username for the user you created a minute ago.\n\nGRANT ALL ON SCHEMA public TO username;\n\nUse quit; to exit out of postgres.\n\n\n\n6.4.4 Connect Database to STAPLE App\n\nMake sure you are in the folder that you copied the github repository into.\nYou can use ls -al to view all files in that folder.\n\n# for example on my server \nerin@staple:~$ cd /var/www/html/STAPLE\nerin@staple:/var/www/html/STAPLE$ ls -al\ntotal 764\ndrwxr-xr-x  13 root root   4096 Oct 24 06:17 .\ndrwxr-xr-x   6 root root   4096 Oct 24 05:02 ..\ndrwxr-xr-x   3 root root   4096 Oct 24 04:27 db\n-rw-r--r--   1 root root    175 Oct 24 04:27 .editorconfig\n-rw-r--r--   1 root root    494 Oct 24 06:17 .env\n# more truncated # \n\nCopy the .env file and rename it .env.local.\n\nYou may need to turn on settings to see these hidden files on your machine.\nYou can create and edit this file at once with nano .env.local or vim if you want.\n\nEnsure the .env.local file has required environment variables.\n\nAfter the commented lines, add the DATABASE_URL line and change  to username:password (no &lt;&gt; these are here to show you what to change).\nCreate and add a SESSION_SECRET_KEY.\n\nIn the command line prompt, use openssl rand -hex 16 and copy this long letter/number combination instead of .\n\n\n\n# This env file should be checked into source control\n# This is the place for default values for all environments\n# Values in `.env.local` and `.env.production` will override these values\nDATABASE_URL=postgresql://&lt;YOUR_DB_USERNAME&gt;@localhost:5432/staple\nSESSION_SECRET_KEY=&lt;SESSIONKEY&gt;\n\nCopy the .env.test file and rename .env.test.local.\nEnsure the .env.test.local file has required environment variables in the same way you did above.\n\nDATABASE_URL=postgresql://&lt;YOUR_DB_USERNAME&gt;@localhost:5432/staple_test\n\n\n6.4.5 Install STAPLE Requirements\n\nMake sure you are in the STAPLE main folder. Use the following (not the # line, these are notes) to install packages, tailwind, and daisyui.\n\n# to install all packages for staple\nnpm install\n# install tailwind css\nblitz install tailwind\n# install daisyui\nnpm i -D daisyui@latest\n\nNext, use the following line to create the database structure/schema for STAPLE to run.\n\n# to create database with the right set up\nblitz prisma migrate dev\n\n\n6.4.6 Starting the App - Local Testing\n\nIn a terminal window, go to the folder you cloned this repository and type:\n\nblitz dev\n\nOpen (usually) http://localhost:3000 (or whatever it says for localhost in the terminal) with your browser to see the result.\nEverything you do will be saved this way, so closing the app would mean just closing the app.\n\n\n\n6.4.7 Starting the App - Production\n\nIn a terminal window, go to the folder you cloned this repository and type:\n\nblitz build\n\nThis step may produce errors in the build. You will need to fix these errors before running the application. Check below for common issues."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "7  Summary",
    "section": "",
    "text": "This section will summarize the main points."
  },
  {
    "objectID": "terminology.html",
    "href": "terminology.html",
    "title": "8  Terminology",
    "section": "",
    "text": "TBD when glossary is fixed."
  }
]