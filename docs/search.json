[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STAPLE Documentation",
    "section": "",
    "text": "1 Preface\nThis book will explain STAPLE to you."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Introduction",
    "section": "",
    "text": "Parts to this documentation\nThree Goals\n\n1) Project Management\n2) Documentation\n3) Transparency"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "7  Summary",
    "section": "",
    "text": "This section will summarize the main points."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "terminology.html",
    "href": "terminology.html",
    "title": "8  Terminology",
    "section": "",
    "text": "term\ndefinition\n\n\n\n\nprimary data\nData generated by the researcher using surveys, interviews, experiments or other sources to explore a research problem.\n\n\nsecondary data\nData that previously existed to explore a research problem, generally not generated by the researcher using the data.\n\n\nsemantic priming\nSemantic priming occurs when someone processes a second word faster after seeing a related word first. For example, you will read the word DOG faster if you see CAT before it in comparison to SPOON."
  },
  {
    "objectID": "metadata.html",
    "href": "metadata.html",
    "title": "3  Metadata",
    "section": "",
    "text": "4 STAPLE Metadata\njson format\nmetadata builder?"
  },
  {
    "objectID": "staple-elements.html#sign-in-screen",
    "href": "staple-elements.html#sign-in-screen",
    "title": "4  Overview of the Software",
    "section": "4.1 Sign-In Screen",
    "text": "4.1 Sign-In Screen"
  },
  {
    "objectID": "staple-elements.html#main-menu",
    "href": "staple-elements.html#main-menu",
    "title": "4  Overview of the Software",
    "section": "4.2 Main Menu",
    "text": "4.2 Main Menu"
  },
  {
    "objectID": "staple-elements.html#project-area",
    "href": "staple-elements.html#project-area",
    "title": "4  Overview of the Software",
    "section": "4.3 Project Area",
    "text": "4.3 Project Area"
  },
  {
    "objectID": "staple-elements.html#project-menu",
    "href": "staple-elements.html#project-menu",
    "title": "4  Overview of the Software",
    "section": "4.4 Project Menu",
    "text": "4.4 Project Menu"
  },
  {
    "objectID": "staple-elements.html#elements",
    "href": "staple-elements.html#elements",
    "title": "4  Overview of the Software",
    "section": "4.5 Elements",
    "text": "4.5 Elements"
  },
  {
    "objectID": "walkthrough.html#example-1-one-pi-multiple-data-sources",
    "href": "walkthrough.html#example-1-one-pi-multiple-data-sources",
    "title": "5  Example Walkthroughs",
    "section": "5.1 Example 1: One PI, Multiple Data Sources",
    "text": "5.1 Example 1: One PI, Multiple Data Sources\nThe first example study covers a computational linguistics project in which a researcher collects primary dataData generated by the researcher using surveys, interviews, experiments or other sources to explore a research problem. and uses a secondary dataData that previously existed to explore a research problem, generally not generated by the researcher using the data. source. In this project, the researcher collects data on semantic primingSemantic priming occurs when someone processes a second word faster after seeing a related word first. For example, you will read the word DOG faster if you see CAT before it in comparison to SPOON. to show that people read faster when the words are related to each other like cat-dog rather than unrelated like spoon-dog. Researchers can define similarity - how related words are - in multiple ways, so the researcher wishes to clearly document how they calculated similarity using an secondary data source. Further, the researcher used other psycholinguistic databases to see if they could predict the amount of semantic priming in their study based on the characteristics of the words in the study.\nOne PI team\n\nusing real data from the lab\nusing cited data from the wild"
  },
  {
    "objectID": "walkthrough.html#complex-example",
    "href": "walkthrough.html#complex-example",
    "title": "5  Example Walkthroughs",
    "section": "5.2 Complex Example",
    "text": "5.2 Complex Example\nMultiple PI team doing a big team project"
  },
  {
    "objectID": "metadata.html#project",
    "href": "metadata.html#project",
    "title": "3  Metadata",
    "section": "4.1 Project",
    "text": "4.1 Project\nRequired elements of project-level metadata:\n\nName of the project\nProject description\nAuthors\n\nCorresponding Author\n\nCitation\n\nPersistent identifier (DOI)\n\nSubject/keywords\nFunders\nDate\n\nhttps://schema.org/ResearchProject"
  },
  {
    "objectID": "metadata.html#data",
    "href": "metadata.html#data",
    "title": "3  Metadata",
    "section": "4.2 Data",
    "text": "4.2 Data\nData gets a special type of schema, etc.\nhttps://schema.org/Dataset\n\n4.2.1 Primary Data\n\n\n4.2.2 Secondary Data"
  },
  {
    "objectID": "metadata.html#project-outputs",
    "href": "metadata.html#project-outputs",
    "title": "3  Metadata",
    "section": "4.3 Project Outputs",
    "text": "4.3 Project Outputs\nNote that data can be text, but this is the spot we classify other objects you may output.\n\n4.3.1 Text\nhttps://schema.org/TextObject\n\n\n4.3.2 Audio\nhttps://schema.org/AudioObject\n\n\n4.3.3 Video\nhttps://schema.org/VideoObject\n\n\n4.3.4 Image\nhttps://schema.org/ImageObject"
  },
  {
    "objectID": "metadata.html#author",
    "href": "metadata.html#author",
    "title": "3  Metadata",
    "section": "4.4 Author",
    "text": "4.4 Author\nhttps://schema.org/Person"
  },
  {
    "objectID": "metadata.html#organization",
    "href": "metadata.html#organization",
    "title": "3  Metadata",
    "section": "4.5 Organization",
    "text": "4.5 Organization\nhttps://schema.org/Organization https://schema.org/FundingAgency (probably don’t need separate)"
  },
  {
    "objectID": "metadata.html#credit",
    "href": "metadata.html#credit",
    "title": "3  Metadata",
    "section": "4.6 CRediT",
    "text": "4.6 CRediT"
  },
  {
    "objectID": "metadata.html#staple-metadata",
    "href": "metadata.html#staple-metadata",
    "title": "3  Metadata",
    "section": "3.3 STAPLE Metadata",
    "text": "3.3 STAPLE Metadata\n\n3.3.1 Action\n\ndone\n\n\n\n3.3.2 Project\nRequired elements of project-level metadata:\n\nName of the project\nProject description\nAuthors\nCorresponding Author\nCitation\nPersistent identifier (DOI)\nSubject/keywords\nFunders\nDate\n\nhttps://schema.org/ResearchProject\n\n\n3.3.3 Data\nData gets a special type of schema, etc.\nhttps://schema.org/Dataset\n\n3.3.3.1 Primary Data\n\n\n3.3.3.2 Secondary Data\n\n\n\n3.3.4 Project Outputs\nNote that data can be text, but this is the spot we classify other objects you may output.\n\n3.3.4.1 Text\nhttps://schema.org/TextObject\n\n\n3.3.4.2 Audio\nhttps://schema.org/AudioObject\n\n\n3.3.4.3 Video\nhttps://schema.org/VideoObject\n\n\n\n3.3.5 Image\nhttps://schema.org/ImageObject\n\n\n3.3.6 Author\nhttps://schema.org/Person\n\n\n3.3.7 Organization\n\n\n\n3.3.8 Funder\n\n\n3.3.9 CRediT"
  },
  {
    "objectID": "metadata.html#add-your-specific-requirements",
    "href": "metadata.html#add-your-specific-requirements",
    "title": "3  Metadata",
    "section": "3.4 Add your specific requirements",
    "text": "3.4 Add your specific requirements\njson format\nmetadata builder?"
  },
  {
    "objectID": "walkthrough.html#example-1-one-principal-investigator-multiple-data-sources",
    "href": "walkthrough.html#example-1-one-principal-investigator-multiple-data-sources",
    "title": "5  Example Walkthroughs",
    "section": "5.1 Example 1: One Principal Investigator, Multiple Data Sources",
    "text": "5.1 Example 1: One Principal Investigator, Multiple Data Sources\nThe first example study covers a computational linguistics project in which a researcher collects primary dataData generated by the researcher using surveys, interviews, experiments or other sources to explore a research problem. and uses a secondary dataData that previously existed to explore a research problem, generally not generated by the researcher using the data. source. In this project, the researcher collects data on semantic primingSemantic priming occurs when someone processes a second word faster after seeing a related word first. For example, you will read the word DOG faster if you see CAT before it in comparison to SPOON. to show that people read faster when the words are related to each other like cat-dog rather than unrelated like spoon-dog. Researchers can define similarity - how related words are - in multiple ways, so the researcher wishes to clearly document how they calculated similarity using an secondary data source. Further, the researcher used other psycholinguistic databases to see if they could predict the amount of semantic priming in their study based on the characteristics of the words in the study.\n\n5.1.1 Add a Project\nFirst, you will go to the project page by using the top navigation bar. To add a new project, click “CREATE PROJECT”.\n\n\n\n\n\nEnter your project name and description.\nTo do: add all project level metadata.\n\n\n\n\n\nOnce the project page is created, you will be brought to the overview page for the project.\nTo do: the data dashboard is temporary, ideas welcome.\n\n\n\n\n\nEach component of the project dashboard is explained more on STAPLE Elements section. In short:\n\nTasks: a place to create to-dos, track contributions, and add reminders to get things done. Tasks are always tied to projects and a specific user or team.\nElements: elements are storage boxes for specific project steps. You can think of them as ways to organize your tasks or project. For example, you may use Ethics, Data, Analysis and Results, and Manuscript as ways to group tasks, contributions, and outputs together. Tasks can be tied to a specific element.\nContributors: people involved in the project. This part does not necessarily mean authorship, it simply means someone who did something for the project.\nSettings: the place to update the project level metadata.\n\nTo do: figure out how to add users and teams for different levels of project tasks.\n\n\n5.1.2 Add Elements\nI would then add the different elements to my project. I click on elements to get the elements page and create element for adding new areas of organization. There are lots of ways to organize these. I could have created “data” and put both primary and secondary data within that element. I also could add separate elements for the pre-registration (if applicable) or potentially separate materials and translation into two elements.\n\n\n\n\n\n\n\n\n\n\nTo do: figure out a view and updating for these.\n\n\n5.1.3 Add Contributors\nFrom the project dashboard, you can click on contributors to add a new person to the project. Note: this process adds them only to that project.\n\n\n\n\n\nYou would be able to add contributors by email on this page. It will notify them that you have added them to the project. Once a contributor has been added to a project, you can begin to assign them tasks.\n\n\n\n\n\nTo do:\n\nAllow adding by email.\nCreate teams and add contributors to them.\n\n\n\n5.1.4 Add Tasks\nIn theory, you could create and run a project with no elements. You would use the task tab for all functionality. To create a task, click on tasks. Note that a lot of task functionality is not available yet, but we will pretend it is.\n\n\n\n\n\nWhen creating a task, you will define:\n\nThe task name\nThe task description or a how-to complete the task\nThe element a task should be assigned to (or none)\nThe person or team associated with the task\nIf the task needs an “output” (something that needs metadata)\nIf so, what type of metadata should the task include?\n\n\n\n\n\n\nOnce you create a task, the information on what needs to be done will be emailed to the user or team with the task information. They (or you) will be able to complete the task, and information about when the task was assigned and completed will be stored.\nIf the task has been tagged with needing an output - you will then need to enter the metadata for the requested output. For example, I created a task called “upload IRB documents”. In this case, the required output would be ethics approval for the study. I would store that document in my favorite repository (OSF, GitHub, FigShare, etc.) and create a permanent link for the document. Then I would enter the required metadata for that document. In this case, it would be a simple explanation of what the text document contains.\nTo do:\n\nAllow tasks to be tagged within element.\nView tasks within elements pages.\nAllow tasks to be tagged with a person or team.\nAllow tasks to be tagged with “needs metadata” or not.\nProvide example of difference in metadata for primary and secondary data.\n\n\n\n5.1.5 Project Outputs\nTo do: Add examples for each type of metadata here. Please see the Metadata section at the moment.\n\n\n5.1.6 Project Completion\nWhen all tasks are complete and all metadata is entered for the project outputs, you can build a project timeline from the dashboard page. This information will present:\n\nWhat was done on a project with a timestamp (example)\n\nWho/When a task was assigned\nWho/When a task was completed\nWho/When metadata was added\nWho/When elements were created\nAnd so on\n\nA machine readable format of all the metadata for the study\nA contributorship output matching the model you wish to use\n\nFor example, tagged CRediT categories\n\n\nTo do: update dashboard to include this option."
  },
  {
    "objectID": "walkthrough.html#example-2-big-team-project-multiple-data-collection-sites",
    "href": "walkthrough.html#example-2-big-team-project-multiple-data-collection-sites",
    "title": "5  Example Walkthroughs",
    "section": "5.2 Example 2: Big-Team Project, Multiple Data Collection Sites",
    "text": "5.2 Example 2: Big-Team Project, Multiple Data Collection Sites"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "6  Installation",
    "section": "",
    "text": "This page will cover how to install the software on your own server."
  },
  {
    "objectID": "installation.html#assumptions",
    "href": "installation.html#assumptions",
    "title": "6  Installation Guide",
    "section": "6.1 Assumptions",
    "text": "6.1 Assumptions\n\nThis guide assumes the following:\n\nYou are working on a Linux server. We are specifically using Ubuntu 20, but this guide should be consistent for most versions of Linux.\nYou have access to the shell command console. You will need access to install files directly onto the server computer.\nYou have worked with the command line before.\nYou have sudo rights to add files and services.\nYou know what a hidden file is and at least how to google how to view them.\nYou know what SQL and databases are, even if you’ve never worked with PostgreSQL before.\nYou know what Apache and/or nginx servers are and how to edit their files.\nYou can at least imagine yourself using git."
  },
  {
    "objectID": "installation.html#web-server-installation",
    "href": "installation.html#web-server-installation",
    "title": "6  Installation Guide",
    "section": "6.2 Web Server Installation",
    "text": "6.2 Web Server Installation\n\nApache - Installation Instructions\nNginx - Installation Instructions\nThey really aren’t big fans of each other, only install one. We are using nginx on our server."
  },
  {
    "objectID": "installation.html#blitzjs-installation",
    "href": "installation.html#blitzjs-installation",
    "title": "6  Installation Guide",
    "section": "6.3 Blitz/JS Installation",
    "text": "6.3 Blitz/JS Installation\n\nInstall node.js and npm - Installation Instructions\n\nOther downloads\nYou should have at least node v18+ and npm v9+.\nYou can check your versions by using node -v and npm -v in a terminal or command window.\nYou may also use yarn, but this guide uses npm.\n\nInstall blitzjs: npm install -g blitz in a terminal/command window. Check your version is at least v2+ by using blitz -v in a command window.\nDepending on server setup, you may need sudo privileges."
  },
  {
    "objectID": "installation.html#clone-this-repository",
    "href": "installation.html#clone-this-repository",
    "title": "6  Installation Guide",
    "section": "6.4 Clone This Repository",
    "text": "6.4 Clone This Repository\n\nClone or copy this github repository to the server.\n\nInstall git on the machine using: sudo apt-get update sudo apt-get install git\nNavigate to /var/www/html/ or /var/www/ on the Linux machine.\nClone the repository by using this guide - Installation Instructions. git clone https://github.com/STAPLE-verse/STAPLE.git\nThis will make a folder called STAPLE with all the files you need.\n\nNavigate to that folder by using cd STAPLE."
  },
  {
    "objectID": "installation.html#database-installation",
    "href": "installation.html#database-installation",
    "title": "6  Installation Guide",
    "section": "6.5 Database Installation",
    "text": "6.5 Database Installation\n\nEnsure that you have a local postgres service running on your computer.\nTo install see: Installation Instructions.\n\nBe sure to write down the superuser information as you are installing the setup for non-Linux machines.\nYou may use other databases, but will need to modify the provided code for their implementation.\n\nCreate the databases for STAPLE. Go to terminal and use:\n\nNote that all lines that start with # are comments for explanation.\n\n\n# get into postgres on linux\nsudo -u postgres psql \n# enter your password for superuser when prompted\nCREATE DATABASE staple;\nCREATE DATABASE staple_test;\n\nCreate a user with appropriate privileges after postgres installation. While in the terminal and postgres, create a new user:\nChange out username and password (be sure to leave the quotes!) for your desired user.\n\nCREATE USER username WITH PASSWORD 'password';\n\nGet into the STAPLE database. You can use \\l and should see something like this:\n\npostgres=# \\l\n                                     List of databases\n    Name     |  Owner   | Encoding |   Collate   |    Ctype    |     Access privileges     \n-------------+----------+----------+-------------+-------------+---------------------------\n postgres    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | \n staple      | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/postgres             +\n             |          |          |             |             | postgres=CTc/postgres    +\n             |          |          |             |             | staple=CTc/postgres      +\n             |          |          |             |             | staple_admin=CTc/postgres\n staple_test | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | \n template0   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres              +\n             |          |          |             |             | postgres=CTc/postgres\n template1   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres              +\n             |          |          |             |             | postgres=CTc/postgres\n(5 rows)\n\nUse the following to get into the STAPLE database.\n\npostgres=# \\c staple\nYou are now connected to database \"staple\" as user \"postgres\".\nstaple=# \n\nYou can check that schema exist using \\dn:\n\nstaple=# \\dn\n List of schemas\n  Name  | Owner  \n--------+--------\n public | staple\n(1 row)\n\nstaple=# \n\nGive your user the appropriate permissions to write to the database. Change out username for the user you created a minute ago.\n\nGRANT ALL ON SCHEMA public TO username;\n\nUse quit; to exit out of postgres."
  },
  {
    "objectID": "installation.html#connect-database-to-staple-app",
    "href": "installation.html#connect-database-to-staple-app",
    "title": "6  Installation Guide",
    "section": "6.6 Connect Database to STAPLE App",
    "text": "6.6 Connect Database to STAPLE App\n\nMake sure you are in the folder that you copied the github repository into.\nYou can use ls -al to view all files in that folder.\n\n# for example on my server \nerin@staple:~$ cd /var/www/html/STAPLE\nerin@staple:/var/www/html/STAPLE$ ls -al\ntotal 764\ndrwxr-xr-x  13 root root   4096 Oct 24 06:17 .\ndrwxr-xr-x   6 root root   4096 Oct 24 05:02 ..\ndrwxr-xr-x   3 root root   4096 Oct 24 04:27 db\n-rw-r--r--   1 root root    175 Oct 24 04:27 .editorconfig\n-rw-r--r--   1 root root    494 Oct 24 06:17 .env\n# more truncated # \n\nCopy the .env file and rename it .env.local.\n\nYou may need to turn on settings to see these hidden files on your machine.\nYou can create and edit this file at once with nano .env.local or vim if you want.\n\nEnsure the .env.local file has required environment variables.\n\nAfter the commented lines, add the DATABASE_URL line and change  to username:password (no &lt;&gt; these are here to show you what to change).\nCreate and add a SESSION_SECRET_KEY.\n\nIn the command line prompt, use openssl rand -hex 16 and copy this long letter/number combination instead of .\n\n\n\n# This env file should be checked into source control\n# This is the place for default values for all environments\n# Values in `.env.local` and `.env.production` will override these values\nDATABASE_URL=postgresql://&lt;YOUR_DB_USERNAME&gt;@localhost:5432/staple\nSESSION_SECRET_KEY=&lt;SESSIONKEY&gt;\n\nCopy the .env.test file and rename .env.test.local.\nEnsure the .env.test.local file has required environment variables in the same way you did above.\n\nDATABASE_URL=postgresql://&lt;YOUR_DB_USERNAME&gt;@localhost:5432/staple_test"
  },
  {
    "objectID": "installation.html#install-staple-requirements",
    "href": "installation.html#install-staple-requirements",
    "title": "6  Installation Guide",
    "section": "6.7 Install STAPLE Requirements",
    "text": "6.7 Install STAPLE Requirements\n\nMake sure you are in the STAPLE main folder. Use the following (not the # line, these are notes) to install packages, tailwind, and daisyui.\n\n# to install all packages for staple\nnpm install\n# install tailwind css\nblitz install tailwind\n# install daisyui\nnpm i -D daisyui@latest\n\nNext, use the following line to create the database structure/schema for STAPLE to run.\n\n# to create database with the right set up\nblitz prisma migrate dev"
  },
  {
    "objectID": "installation.html#starting-the-app---local-testing",
    "href": "installation.html#starting-the-app---local-testing",
    "title": "6  Installation Guide",
    "section": "6.8 Starting the App - Local Testing",
    "text": "6.8 Starting the App - Local Testing\n\nIn a terminal window, go to the folder you cloned this repository and type:\n\nblitz dev\n\nOpen (usually) http://localhost:3000 (or whatever it says for localhost in the terminal) with your browser to see the result.\nThis step works great on a “regular” computer, but may not be useful for a server. Instead run the service “in production” to view on your website."
  },
  {
    "objectID": "installation.html#starting-the-app---production",
    "href": "installation.html#starting-the-app---production",
    "title": "6  Installation Guide",
    "section": "6.9 Starting the App - Production",
    "text": "6.9 Starting the App - Production\n\nIn a terminal window, go to the folder you cloned this repository and type:\n\nblitz build\n\nThis step may produce errors in the build. You will need to fix these errors before running the application. Check below for common issues."
  },
  {
    "objectID": "installation.html#keeping-the-app-going",
    "href": "installation.html#keeping-the-app-going",
    "title": "6  Installation Guide",
    "section": "6.10 Keeping the App Going",
    "text": "6.10 Keeping the App Going\n\nCreate a service.\nGenerally, you might consider putting it here: /etc/systemd/system/ on a linux machine.\nWe’ve named the file blitz.service as an example creating it using nano.\nTutorial for those who do not know how to do this - Installation Instructions\n\n# for example \nerin@staple:/var/www/html/STAPLE$ cd /etc/systemd/system/\nerin@staple:/etc/systemd/system$ nano blitz.service\n\nExample file structure:\nChange the WorkingDirectory to your folder.\n\n[Unit]\nDescription=Starts the Blitz service.\nAfter=network.target\n\n[Service]\nType=simple\nWorkingDirectory=/var/www/html/STAPLE\nExecStart=/usr/local/bin/blitz start\nRestart=always\n\n[Install]\nWantedBy=default.target\n\nCommands:\n\nstop: sudo systemctl stop blitz\nstart: sudo systemctl start blitz\nrestart: sudo systemctl restart blitz\nreload: sudo systemctl reload blitz\ndisable: sudo systemctl disable blitz\nre-enable: sudo systemctl enable blitz\nstatus: sudo systemctl status blitz\nreset: sudo systemctl reset-failed blitz\n\n\nMany thanks to Scott B. for setting this up and giving instructions.\n\nRun sudo systemctl start blitz.\nCheck the status using sudo systemctl status blitz. Type the letter q to exit.\nStatus can also help you troubleshoot when you have an error."
  },
  {
    "objectID": "installation.html#setting-up-the-proxy",
    "href": "installation.html#setting-up-the-proxy",
    "title": "6  Installation Guide",
    "section": "6.11 Setting Up the Proxy",
    "text": "6.11 Setting Up the Proxy\n\nUse the following to get to the nginx web server: cd /etc/nginx/sites-enabled\nCreate a file by using nano YOURWEBSITE … for example ours is nana app.staple.science because that is the website of our hosted version of STAPLE.\nCreate the server file setup:\n\n# Default server configuration\n#\nserver {\n\n    server_name YOURWEBSITE;\n    error_log /var/www/html/YOURFOLDER/logs/web-server.log;\n    location / {\n        proxy_pass http://localhost:3000/;\n    }\n}\n\nserver {\n    server_name YOURWEBSITE;\n    listen 80;\n}\n\nFor https you need to set up a certificate and the easiest solution is through certbot. See Installation Instructions."
  },
  {
    "objectID": "installation.html#common-errors",
    "href": "installation.html#common-errors",
    "title": "6  Installation Guide",
    "section": "6.12 Common Errors",
    "text": "6.12 Common Errors"
  },
  {
    "objectID": "metadata.html#these-words-arent-yours",
    "href": "metadata.html#these-words-arent-yours",
    "title": "3  Metadata",
    "section": "3.1 these words aren’t yours",
    "text": "3.1 these words aren’t yours\nWhile the metadata application is manifold, covering a large variety of fields, there are specialized and well-accepted models to specify types of metadata. Bretherton & Singley (1994) distinguish between two distinct classes: structural/control metadata and guide metadata.[24] Structural metadata describes the structure of database objects such as tables, columns, keys and indexes. Guide metadata helps humans find specific items and is usually expressed as a set of keywords in a natural language. According to Ralph Kimball, metadata can be divided into three categories: technical metadata (or internal metadata), business metadata (or external metadata), and process metadata.\nNISO distinguishes three types of metadata: descriptive, structural, and administrative.[22] Descriptive metadata is typically used for discovery and identification, as information to search and locate an object, such as title, authors, subjects, keywords, and publisher. Structural metadata describes how the components of an object are organized. An example of structural metadata would be how pages are ordered to form chapters of a book. Finally, administrative metadata gives information to help manage the source. Administrative metadata refers to the technical information, such as file type, or when and how the file was created. Two sub-types of administrative metadata are rights management metadata and preservation metadata. Rights management metadata explains intellectual property rights, while preservation metadata contains information to preserve and save a resource.[8]"
  },
  {
    "objectID": "metadata.html#end",
    "href": "metadata.html#end",
    "title": "3  Metadata",
    "section": "3.2 end",
    "text": "3.2 end\nTo do: Add glossary terms throughout this document.\nhttps://www.nature.com/articles/s41597-022-01815-3 https://direct.mit.edu/qss/article/1/1/414/15577/Crossref-The-sustainable-source-of-community-owned https://www.cell.com/patterns/pdf/S2666-3899(21)00170-7.pdf\nWhy do I need it\nTypes of metadata\nWhat is json\nWhy is json useful"
  }
]